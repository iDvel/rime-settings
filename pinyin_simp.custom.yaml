patch:
  switches:
    - name: ascii_mode
      reset: 0
      # states: [中文, 西文] # 永远不会切所以注释了
    - name: full_shape
      reset: 0
      # states: [半角, 全角] # 永远不会切所以注释了
    - name: ascii_punct
      reset: 0
      # states: [。，, ．，] # 永远不会切所以注释了
    - name: one-to-many
      reset: 1
    - name: traditionalization
      reset: 0 # 如果不想每次切换 App 都自动变成简体，可以注释这里
      states: [简, 繁]
  
  # 切换繁体快捷键
  key_binder/bindings/+:
    - {when: always, accept: Control+Shift+4, toggle: traditionalization}
  
  # 八股文
  __include: grammar:/hans

  # 挂载词库
  translator/dictionary: pinyin_simp.extended

  # custom_phrase
  engine/translators/@before 2: table_translator@custom_phrase
  custom_phrase:
    dictionary: ""
    user_dict: custom_phrase
    db_class: stabledb
    enable_completion: false
    enable_sentence: false
    initial_quality: 1

  # 动态日期时间
  engine/translators/@next: lua_translator@date_translator
  
  # 过滤器
  engine/filters:
    - simplifier@one-to-many
    - simplifier@traditionalize
    - uniquifier
  
  # one-to-many，增加了按键符号的映射
  one-to-many:
    opencc_config: one-to-many.json
    option_name: one-to-many

  # 繁体
  traditionalize:
    opencc_config: s2t.json
    option_name: traditionalization
    tips: all # 简入繁出，注销掉可直接出繁

  # Easy English Nano
  schema/dependencies/@next: melt_eng
  engine/translators/@before 0: table_translator@melt_eng
  melt_eng:
    dictionary: melt_eng
    spelling_hints: 9
    enable_completion: true
    enable_sentence: false
    # initial_quality 值为负数时，在能得到中文结果的情况下英文永远不会出现在第一个候选项。
    # 这里设置为 0，但同时会有单编码时被英文占据第一候选项的问题
    # 建议在 custom_phrase 中设置单编码固顶字来解决这个问题
    initial_quality: 0 # -3
  # 令輸入方案對大寫字符生效
  speller/alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA

  speller/algebra:
    # 原装
    - abbrev/^([a-z]).+$/$1/
    - abbrev/^([zcs]h).+$/$1/
    - derive/^([nl])ue$/$1ve/
    - derive/^([jqxy])u/$1v/
    - derive/un$/uen/
    - derive/ui$/uei/
    - derive/iu$/iou/
    - derive/([aeiou])ng$/$1gn/
    - derive/([dtngkhrzcs])o(u|ng)$/$1o/
    - derive/ong$/on/
    - derive/ao$/oa/
    - derive/([iu])a(o|ng?)$/a$1$2/
    # 自己的：
    - derive/ua$/au/ # shau => shua
    - derive/([iu])a(o|ng?)$/a$1$2/ # tain => tian laing => liang
    - derive/ian$/ina/ # tina => tian linag => liang
    - derive/([wrtypsdfghjklzcbnm])a([on])$/$1$2a/ # hoa => hao  hna  => han
    - derive/([wtpsdghkzcbnm])ai$/$1ia/ # zia => zai # 主要是过滤掉 lia和lai 
    - derive/([zcs])hi$/$1ih/ # zih => zhi cih => chi sih => shi

  # “/” 模式转为 “v” 模式
  recognizer/patterns/punct: "^v([a-zA-Z]+|[0-9]0?)$" # "^/([a-z]+|[0-9]0?)$"
  
  punctuator:
    import_preset: symbols.custom
    # 标点符号直接上屏
    half_shape:
      "#": "#"
      "`": "`"
      "~": "~"
      "@": "@"
      "=": "="
      "/": "/"
      '\': "、"
      "'": { pair: ["「", "」"] }
      "[": "["
      "]": "]"
      "{": "{"
      "}": "}"
      "$": "￥"
      "%": "%"
      "<": "《"
      ">": "》"
      "*": "*"
      "|": "|"
  